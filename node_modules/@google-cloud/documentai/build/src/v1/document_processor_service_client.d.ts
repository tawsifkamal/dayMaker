import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation } from 'google-gax';
import * as protos from '../../protos/protos';
/**
 *  Service to call Cloud DocumentAI to process documents according to the
 *  processor's definition. Processors are built using state-of-the-art Google
 *  AI such as natural language, computer vision, and translation to extract
 *  structured information from unstructured or semi-structured documents.
 * @class
 * @memberof v1
 */
export declare class DocumentProcessorServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    documentProcessorServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of DocumentProcessorServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    processDocument(request?: protos.google.cloud.documentai.v1.IProcessRequest, options?: CallOptions): Promise<[protos.google.cloud.documentai.v1.IProcessResponse, protos.google.cloud.documentai.v1.IProcessRequest | undefined, {} | undefined]>;
    processDocument(request: protos.google.cloud.documentai.v1.IProcessRequest, options: CallOptions, callback: Callback<protos.google.cloud.documentai.v1.IProcessResponse, protos.google.cloud.documentai.v1.IProcessRequest | null | undefined, {} | null | undefined>): void;
    processDocument(request: protos.google.cloud.documentai.v1.IProcessRequest, callback: Callback<protos.google.cloud.documentai.v1.IProcessResponse, protos.google.cloud.documentai.v1.IProcessRequest | null | undefined, {} | null | undefined>): void;
    batchProcessDocuments(request?: protos.google.cloud.documentai.v1.IBatchProcessRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    batchProcessDocuments(request: protos.google.cloud.documentai.v1.IBatchProcessRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    batchProcessDocuments(request: protos.google.cloud.documentai.v1.IBatchProcessRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IBatchProcessResponse, protos.google.cloud.documentai.v1.IBatchProcessMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `batchProcessDocuments()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkBatchProcessDocumentsProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkBatchProcessDocumentsProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.BatchProcessResponse, protos.google.cloud.documentai.v1.BatchProcessMetadata>>;
    reviewDocument(request?: protos.google.cloud.documentai.v1.IReviewDocumentRequest, options?: CallOptions): Promise<[LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    reviewDocument(request: protos.google.cloud.documentai.v1.IReviewDocumentRequest, options: CallOptions, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    reviewDocument(request: protos.google.cloud.documentai.v1.IReviewDocumentRequest, callback: Callback<LROperation<protos.google.cloud.documentai.v1.IReviewDocumentResponse, protos.google.cloud.documentai.v1.IReviewDocumentOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `reviewDocument()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkReviewDocumentProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkReviewDocumentProgress(name: string): Promise<LROperation<protos.google.cloud.documentai.v1.ReviewDocumentResponse, protos.google.cloud.documentai.v1.ReviewDocumentOperationMetadata>>;
    /**
     * Return a fully-qualified humanReviewConfig resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    humanReviewConfigPath(project: string, location: string, processor: string): string;
    /**
     * Parse the project from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Parse the location from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Parse the processor from HumanReviewConfig resource.
     *
     * @param {string} humanReviewConfigName
     *   A fully-qualified path representing HumanReviewConfig resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromHumanReviewConfigName(humanReviewConfigName: string): string | number;
    /**
     * Return a fully-qualified processor resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} processor
     * @returns {string} Resource name string.
     */
    processorPath(project: string, location: string, processor: string): string;
    /**
     * Parse the project from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProcessorName(processorName: string): string | number;
    /**
     * Parse the location from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromProcessorName(processorName: string): string | number;
    /**
     * Parse the processor from Processor resource.
     *
     * @param {string} processorName
     *   A fully-qualified path representing Processor resource.
     * @returns {string} A string representing the processor.
     */
    matchProcessorFromProcessorName(processorName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
